name: Integration Test for PR Automated Comments

on:
  # Trigger on pull requests to test actual PR comment behavior
  pull_request:
    types: [opened, ready_for_review, closed]

  # Manual trigger for testing different branches and scenarios
  workflow_dispatch:
    inputs:
      workflow_ref:
        description: 'Branch or tag of the auto-comments repo to test (e.g., main, feature-branch, v1)'
        required: true
        default: 'main'
        type: string
      test_comment_type:
        description: 'Which comment type to test'
        required: true
        type: choice
        options:
          - first_pr
          - ready_for_review
          - merged

jobs:
  # For real PRs - call the actual workflow
  real-pr-comments:
    name: Real PR Comments Test
    if: github.event_name == 'pull_request'
    uses: RequestNetwork/auto-comments/.github/workflows/pr-auto-comments.yml@main
    with:
      org_name: "RequestNetwork"
      additional_internal_users: "integration-test-bot"
      first_pr_comment: |
        # [TEST] Welcome to your first contribution!

        Thank you @{{username}} for submitting your first pull request to the {{repository}} repository.

        This is a test of the automated comment system. This comment was triggered by the integration test workflow.

        Repository: {{repository}}
        Organization: {{org}}

      ready_for_review_comment: |
        # [TEST] PR Ready for Review

        This PR from @{{username}} is now ready for review in the {{repository}} repository.

        This is a test of the automated comment system. This comment was triggered by the integration test workflow.

      merged_pr_comment: |
        # [TEST] PR Successfully Merged!

        Congratulations @{{username}}! Your PR to {{repository}} has been merged.

        This is a test of the automated comment system. This comment was triggered by the integration test workflow.
    secrets:
      token: ${{ secrets.GH_PAT }}

  # For manual testing - simulate PR events
  manual-test:
    name: Manual Test
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Create test issue
        id: create-issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const commentType = '${{ github.event.inputs.test_comment_type }}';
            const workflowRef = '${{ github.event.inputs.workflow_ref }}';

            // Create a test issue to track this test run
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Integration Test: ${commentType} comment from ${workflowRef}`,
              body: `This is an automatically created issue to test the PR automated comments workflow.

              Testing branch/tag: \`${workflowRef}\`
              Testing comment type: \`${commentType}\`

              The test will post the response comment below.`
            });

            console.log(`Created test issue #${issue.data.number}`);
            return { issue_number: issue.data.number };

      - name: Test First PR Comment
        if: github.event.inputs.test_comment_type == 'first_pr'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const issueNumber = JSON.parse('${{ steps.create-issue.outputs.result }}').issue_number;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `Calling workflow for First PR comment test with ref: ${{ github.event.inputs.workflow_ref }}`
            });

            // Call the workflow
            await github.rest.actions.createWorkflowDispatch({
              owner: 'RequestNetwork',
              repo: 'auto-comments',
              workflow_id: 'pr-auto-comments.yml',
              ref: '${{ github.event.inputs.workflow_ref }}',
              inputs: {
                org_name: 'RequestNetwork',
                event_type: 'opened',
                is_first_pr: 'true',
                issue_number: issueNumber.toString()
              }
            });

      - name: Test Ready for Review Comment
        if: github.event.inputs.test_comment_type == 'ready_for_review'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const issueNumber = JSON.parse('${{ steps.create-issue.outputs.result }}').issue_number;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `Calling workflow for Ready for Review comment test with ref: ${{ github.event.inputs.workflow_ref }}`
            });

            // Call the workflow
            await github.rest.actions.createWorkflowDispatch({
              owner: 'RequestNetwork',
              repo: 'auto-comments',
              workflow_id: 'pr-auto-comments.yml',
              ref: '${{ github.event.inputs.workflow_ref }}',
              inputs: {
                org_name: 'RequestNetwork',
                event_type: 'ready_for_review',
                issue_number: issueNumber.toString()
              }
            });

      - name: Test Merged PR Comment
        if: github.event.inputs.test_comment_type == 'merged'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const issueNumber = JSON.parse('${{ steps.create-issue.outputs.result }}').issue_number;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `Calling workflow for Merged PR comment test with ref: ${{ github.event.inputs.workflow_ref }}`
            });

            // Call the workflow
            await github.rest.actions.createWorkflowDispatch({
              owner: 'RequestNetwork',
              repo: 'auto-comments',
              workflow_id: 'pr-auto-comments.yml',
              ref: '${{ github.event.inputs.workflow_ref }}',
              inputs: {
                org_name: 'RequestNetwork',
                event_type: 'merged',
                issue_number: issueNumber.toString()
              }
            });

      - name: Wait for workflow to complete
        run: |
          echo "Waiting for the workflow to complete..."
          sleep 20
          echo "Test completed. Please check the issue #${{ fromJson(steps.create-issue.outputs.result).issue_number }} for results."
